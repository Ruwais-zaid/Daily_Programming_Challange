Q.9Longest Common Prefix

You are given an array of strings strs[], consisting of lowercase letters. Your task is to find the longest common prefix shared among all the strings. If there is no common prefix, return an empty string "".
A common prefix is a substring that appears at the beginning of all the strings in the array. The task is to identify the longest such prefix that all strings share.

Input:
An array of strings strs[] where each string consists of lowercase English letters.

Output:
A string representing the longest common prefix. If no common prefix exists, return an empty string "".

Examples:
Example 1
Input: strs[] = ["flower", "flow", "flight"]
Output: "fl"
Explanation: The longest common prefix among the strings "flower", "flow", and "flight" is "fl".
Example 2
Input: strs[] = ["dog", "racecar", "car"]
Output: ""
Explanation: There is no common prefix among the strings "dog", "racecar", and "car", so the output is an empty string.

Constraints:
1 ≤ strs.length ≤ 200 (The array can contain up to 200 strings)
0 ≤ strs[i].length ≤ 200 (Each string can be up to 200 characters long)
All strings in strs[] consist of lowercase English letters.

Test Cases:
Input: strs[] = ["flower", "flow", "flight"]
Output: 
Input: strs[] = ["dog", "racecar", "car"]
Output: ""
Input: strs[] = ["apple", "ape", "april"]
Output: "ap"
Input: strs[] = [""]
Output: “”
Input: strs[] = ["alone"]
Output: "alone"

Edge Cases:
Empty array: If the array is empty, the output should be an empty string.
Single string: If the array contains only one string, the output should be the string itself.
No common prefix: If the strings have no common prefix, return an empty string.

Soln:
class TirNode{
    char data;
    TirNode children[]= new TirNode[26];
    int childCount;
    boolean isTerminal;

    TirNode(char ch){
        data=ch;
        for(int i=0;i<26;i++){
            children[i]=null;
        }
        childCount=0;
        isTerminal = false;
    }
}
 public static  void insertUtil(TirNode root,String word){
        if(word.length()==0){
            root.isTerminal=true;
            return;
        }

        int index= word.charAt(0)-'a';
        TirNode child;
        //present
        if(root.children[index]!=null){
            child=root.children[index];
        }
        else{
            child = new TirNode(word.charAt(0));
            root.childCount++;
            root.children[index]=child;
        }
        insertUtil(child,word.substring(1));
    }
public static String lcp(String str,TirNode root){
        StringBuilder ans= new StringBuilder();

        for(int i=0;i<str.length();i++){
            char ch= str.charAt(i);
            if(root.childCount==1 && !root.isTerminal){
                ans.append(ch);
                int index=ch-'a';
                root=root.children[index];
            }
            else{
                break;
            }

        }
        return ans.toString();

    }

public static void main(String[] args) {
        TirNode root= new TirNode('\0');
        String arr[]={"dog"};
        for(int i=0;i<arr.length;i++){
            insertUtil(root,arr[i]);
        }

        String first=arr[0];
        String ans=lcp(first,root);
        System.out.println(ans);
}

//Using Tries  Time:O(n)
//Space  : 0(n)
