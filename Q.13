soln:
public class Main
{
	public static void main(String[] args) {
		String s= "babad";
		int n= s.length();
		boolean dp[][]= new boolean[n][n];
		String str="";
		int len=0;
		int max=Integer.MIN_VALUE;
		for(int g=0;g<n;g++){
		    for(int i=0,j=g;j<n;i++,j++){
		        if(g==0){
		            dp[i][j]=true;
		            len=Math.max(len,s.substring(i,j+1).length());
		            
		        }
		        else if(g==1){
		            if(s.charAt(i)==s.charAt(j)){
		                dp[i][j]=true;
		                len=Math.max(len,s.substring(i,j+1).length());
		            }
		        }
		        else{
		            if(s.charAt(i)==s.charAt(j) && dp[i+1][j-1]==true){
		                dp[i][j]=true;
		                len=Math.max(len,s.substring(i,j+1).length());
		            }
		        }
		        if(dp[i][j]){
		            if(len>max){
		                max=len;
		                str=s.substring(i,j+1);
		            }
		            
		        }
		    }
		    
		}
		System.out.println("Longest Palandrom Substring" + str);
  System.out.println("Longest length of Substring" + max);
	}
}

//Using DP;
Time:O(n*n)
Space:O(n);
